name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: 18
  # Default Docker image name; change if you want a different registry
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/devsecops-tic-tac-toe

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: SonarQube scan and Quality Gate
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ github.repository }}
        run: |
          # Run Sonar scanner via the official sonar-scanner-cli docker image
          docker run --rm \
            -e SONAR_HOST_URL="${SONAR_HOST_URL}" \
            -e SONAR_LOGIN="${SONAR_TOKEN}" \
            -v "${{ github.workspace }}":/usr/src \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \
            -Dsonar.sources=. \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.login="${SONAR_TOKEN}"

          # If scanner produced report-task.txt, wait for background task and evaluate quality gate
          if [ -f .scannerwork/report-task.txt ]; then
            CE_TASK_ID=$(grep '^ceTaskId=' .scannerwork/report-task.txt | cut -d'=' -f2)
            SERVER_URL=$(grep '^serverUrl=' .scannerwork/report-task.txt | cut -d'=' -f2)
            if [ -z "$CE_TASK_ID" ] || [ -z "$SERVER_URL" ]; then
              echo "Missing ceTaskId or serverUrl in report-task.txt, skipping Quality Gate check"
            else
              echo "Waiting for SonarQube background task $CE_TASK_ID at $SERVER_URL"
              for i in $(seq 1 30); do
                STATUS=$(curl -s -u "${SONAR_TOKEN}:" "${SERVER_URL}/api/ce/task?id=${CE_TASK_ID}" | jq -r .task.status)
                echo "Status: $STATUS"
                if [ "$STATUS" = "SUCCESS" ] || [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "CANCELED" ]; then
                  break
                fi
                sleep 5
              done

              ANALYSIS_ID=$(curl -s -u "${SONAR_TOKEN}:" "${SERVER_URL}/api/ce/task?id=${CE_TASK_ID}" | jq -r .task.analysisId)
              if [ -n "$ANALYSIS_ID" ] && [ "$ANALYSIS_ID" != "null" ]; then
                QG_STATUS=$(curl -s -u "${SONAR_TOKEN}:" "${SERVER_URL}/api/qualitygates/project_status?analysisId=${ANALYSIS_ID}" | jq -r .projectStatus.status)
                echo "Quality Gate status: $QG_STATUS"
                if [ "$QG_STATUS" != "OK" ]; then
                  echo "Quality gate failed: $QG_STATUS"
                  exit 1
                fi
              else
                echo "analysisId not available, skipping quality gate check"
              fi
            fi
          else
            echo ".scannerwork/report-task.txt not found; Sonar scanner may not have produced a report. Skipping Quality Gate check."
          fi

      - name: Log in to container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ github.run_number }}
            ${{ env.DOCKER_IMAGE }}:latest

      - name: Run container (smoke test)
        run: |
          docker run -d --name ci-smoke -p 5173:5173 ${{ env.DOCKER_IMAGE }}:${{ github.run_number }} || (docker logs ci-smoke || true)
          sleep 5
          curl --fail http://localhost:5173 || (docker logs ci-smoke && exit 1)
          docker rm -f ci-smoke || true
